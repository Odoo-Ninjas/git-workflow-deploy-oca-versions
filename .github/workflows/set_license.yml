# https://docs.github.com/en/actions/using-workflows/reusing-workflows
name: Apply zebroo license

on:
  workflow_call:
    inputs:
      # provide some comma separated names, which are ignored at licensing
      exceptions:
        required: false
        type: string
      src:
        required: true
        type: string

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # - name: setup merge
      #   run: |
      #     set -x
      #     git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY

      - name: set license
        run: |
          pip install pip --upgrade
          pip install git+https://github.com/psf/black

      - name: set license python
        shell: python
        run: |
          import subprocess
          from pathlib import Path

          copyright = "# Part of Zebroo GmbH. See LICENSE file for full copyright and licensing details (www.zebroo.de/license)."

          exceptions = list(map(lambda x: x.strip(), '${{ inputs.exceptions }}'.split(",")))
          inc = list(map(lambda x: x.strip(), "${{ inputs.src}}".split(",")))

          for file in Path(".").rglob("*.py"):
              content = file.read_text()
              for test in exceptions:
                  if test in str(file):
                      continue
              if not any(x in str(file) for x in inc):
                continue

              if file.name == "__manifest__.py":
                  content = eval(content)
                  content["author"] = "Zebroo GmbH (hello@zebroo.de)"
                  content["license"] = "Other proprietary"
                  content = str(content)
              else:
                  if copyright not in content:
                      content = copyright + "\n" + content
              file.write_text(content)
              subprocess.call(f"black '{file}'", shell=True)

      - name: if dirty files, commit them again (careful with recursion)
        run: |
          set -e
          changes="$(git status --porcelain | python3 -c 'import sys; print(sum(1 for _ in sys.stdin))')"
          if [[ "$changes" != "0" ]]; then
            git add .
            git config user.email 'github-action@github.com'
            git config user.name 'github-action@github.com'
            git commit -am 'code cleanup'
            git push
          fi
        env:
          GH_TOKEN: ${{ github.token }}
